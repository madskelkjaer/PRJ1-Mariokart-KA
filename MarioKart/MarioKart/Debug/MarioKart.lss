
MarioKart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000004dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000468  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800200  00800200  000004dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000050c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  0000054c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000028da  00000000  00000000  000006dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001565  00000000  00000000  00002fb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bd1  00000000  00000000  0000451b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000390  00000000  00000000  000050ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b14  00000000  00000000  0000547c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000869  00000000  00000000  00005f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  000067f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	0c c1       	rjmp	.+536    	; 0x226 <__vector_3>
   e:	00 00       	nop
  10:	31 c1       	rjmp	.+610    	; 0x274 <__vector_4>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a2 30       	cpi	r26, 0x02	; 2
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	de d0       	rcall	.+444    	; 0x2c2 <main>
 106:	ae c1       	rjmp	.+860    	; 0x464 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <_ZN12DriveControlC1Ev>:

// ## SoundDriver ##
#include "..\SoundDriver/Sound.h"

// default constructor
DriveControl::DriveControl()
 10a:	0f 93       	push	r16
 10c:	1f 93       	push	r17
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	00 d0       	rcall	.+0      	; 0x114 <_ZN12DriveControlC1Ev+0xa>
 114:	1f 92       	push	r1
 116:	cd b7       	in	r28, 0x3d	; 61
 118:	de b7       	in	r29, 0x3e	; 62
 11a:	8c 01       	movw	r16, r24
 11c:	ec d0       	rcall	.+472    	; 0x2f6 <_ZN5SoundC1Ev>
 11e:	c8 01       	movw	r24, r16
 120:	01 96       	adiw	r24, 0x01	; 1
 122:	4b d0       	rcall	.+150    	; 0x1ba <_ZN10FrontLightC1Ev>
 124:	c8 01       	movw	r24, r16
 126:	02 96       	adiw	r24, 0x02	; 2
 128:	3e d0       	rcall	.+124    	; 0x1a6 <_ZN9BackLightC1Ev>
 12a:	c8 01       	movw	r24, r16
 12c:	03 96       	adiw	r24, 0x03	; 3
 12e:	e2 d0       	rcall	.+452    	; 0x2f4 <_ZN5MotorC1Ev>
{
	Sound sound;
 130:	ce 01       	movw	r24, r28
 132:	04 96       	adiw	r24, 0x04	; 4
 134:	e0 d0       	rcall	.+448    	; 0x2f6 <_ZN5SoundC1Ev>
	sound_ = sound;
	
	FrontLight frontLight;
 136:	ce 01       	movw	r24, r28
 138:	03 96       	adiw	r24, 0x03	; 3
 13a:	3f d0       	rcall	.+126    	; 0x1ba <_ZN10FrontLightC1Ev>
	frontLight_ = frontLight;
	
	BackLight backLight;
 13c:	ce 01       	movw	r24, r28
 13e:	02 96       	adiw	r24, 0x02	; 2
 140:	32 d0       	rcall	.+100    	; 0x1a6 <_ZN9BackLightC1Ev>
	backLight_ = backLight;
	
	Motor motor;
 142:	ce 01       	movw	r24, r28
 144:	01 96       	adiw	r24, 0x01	; 1
 146:	d6 d0       	rcall	.+428    	; 0x2f4 <_ZN5MotorC1Ev>
 148:	ce 01       	movw	r24, r28
#include "..\SoundDriver/Sound.h"

// default constructor
DriveControl::DriveControl()
{
	Sound sound;
 14a:	04 96       	adiw	r24, 0x04	; 4
 14c:	19 d1       	rcall	.+562    	; 0x380 <_ZN5SoundD1Ev>
 14e:	0f 90       	pop	r0
 150:	0f 90       	pop	r0
	BackLight backLight;
	backLight_ = backLight;
	
	Motor motor;
	motor_ = motor;
} //DriveControl
 152:	0f 90       	pop	r0
 154:	0f 90       	pop	r0
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	1f 91       	pop	r17
 15c:	0f 91       	pop	r16
 15e:	08 95       	ret

00000160 <_ZN12DriveControl17startDriveControlEv>:
 160:	cf 93       	push	r28
 162:	df 93       	push	r29

void DriveControl::startDriveControl()
{
 164:	ec 01       	movw	r28, r24
	// Vent på at bruger initialiserer kørsel med knap.
	// Derefter kan vi lave noget sejt med lysene i nogle sekunder, ellers kører bilen jo ind i ens hånd når man trykker på knappen.
	
	
	// Afspil startlyd
	sound_.playSound(1);
 166:	61 e0       	ldi	r22, 0x01	; 1
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	0c d1       	rcall	.+536    	; 0x384 <_ZN5Sound9playSoundEi>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16c:	2f ef       	ldi	r18, 0xFF	; 255
 16e:	87 ea       	ldi	r24, 0xA7	; 167
 170:	91 e6       	ldi	r25, 0x61	; 97
 172:	21 50       	subi	r18, 0x01	; 1
 174:	80 40       	sbci	r24, 0x00	; 0
 176:	90 40       	sbci	r25, 0x00	; 0
 178:	e1 f7       	brne	.-8      	; 0x172 <_ZN12DriveControl17startDriveControlEv+0x12>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <_ZN12DriveControl17startDriveControlEv+0x1c>
 17c:	00 00       	nop
	// Begynd kørsel fremad i kontrolleret tempo
	
	_delay_ms(2000);
	
	sound_.playSound(2);
 17e:	62 e0       	ldi	r22, 0x02	; 2
 180:	70 e0       	ldi	r23, 0x00	; 0
 182:	ce 01       	movw	r24, r28
 184:	ff d0       	rcall	.+510    	; 0x384 <_ZN5Sound9playSoundEi>
 186:	2f ef       	ldi	r18, 0xFF	; 255
 188:	87 ea       	ldi	r24, 0xA7	; 167
 18a:	91 e6       	ldi	r25, 0x61	; 97
 18c:	21 50       	subi	r18, 0x01	; 1
 18e:	80 40       	sbci	r24, 0x00	; 0
 190:	90 40       	sbci	r25, 0x00	; 0
 192:	e1 f7       	brne	.-8      	; 0x18c <_ZN12DriveControl17startDriveControlEv+0x2c>
 194:	00 c0       	rjmp	.+0      	; 0x196 <_ZN12DriveControl17startDriveControlEv+0x36>
 196:	00 00       	nop
	// Begynd kørsel fremad i kontrolleret tempo
	
	_delay_ms(2000);
	
	sound_.playSound(3);
 198:	63 e0       	ldi	r22, 0x03	; 3
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	ce 01       	movw	r24, r28
 19e:	f2 d0       	rcall	.+484    	; 0x384 <_ZN5Sound9playSoundEi>
	// rc 11 er vi forbi målstregen, og vi bremser.
	
	// afspil slutlyd
	
	
}
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	08 95       	ret

000001a6 <_ZN9BackLightC1Ev>:
{
	// Mode = 3 (PWM, Phase Correct, 10 bit)
	// Set OC1A on match down counting / Clear OC1A on match up counting
	// Set OC1B on match down counting / Clear OCBA on match up counting
	// Clock prescaler = 1
	TCCR1A = 0b10100011;
 1a6:	83 ea       	ldi	r24, 0xA3	; 163
 1a8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
	TCCR1B = 0b00000001;
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
		
	//Configure PORTB as output
	//Clear PORTB
	DDRB=0xFF;
 1b2:	8f ef       	ldi	r24, 0xFF	; 255
 1b4:	84 b9       	out	0x04, r24	; 4
	PORTB=0x00;
 1b6:	15 b8       	out	0x05, r1	; 5
 1b8:	08 95       	ret

000001ba <_ZN10FrontLightC1Ev>:
{
	// Mode = 3 (PWM, Phase Correct, 10 bit)
	// Set OC1A on match down counting / Clear OC1A on match up counting
	// Set OC1B on match down counting / Clear OCBA on match up counting
	// Clock prescaler = 1
	TCCR1A = 0b10100011;
 1ba:	83 ea       	ldi	r24, 0xA3	; 163
 1bc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
	TCCR1B = 0b00000001;
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
	
	//Configure PORTB as output
	//Clear PORTB
	DDRB=0xFF;
 1c6:	8f ef       	ldi	r24, 0xFF	; 255
 1c8:	84 b9       	out	0x04, r24	; 4
	PORTB=0x00;
 1ca:	15 b8       	out	0x05, r1	; 5
 1cc:	08 95       	ret

000001ce <_Z18startReflexSensorsv>:
	
	startReflexSensors();
}

void startReflexSensors() {
	EIMSK |= REFLEKS_ENABLE_MASK;
 1ce:	8d b3       	in	r24, 0x1d	; 29
 1d0:	8c 60       	ori	r24, 0x0C	; 12
 1d2:	8d bb       	out	0x1d, r24	; 29
	EICRA |= REFLEKS_TRIGGER_MASK;
 1d4:	e9 e6       	ldi	r30, 0x69	; 105
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	80 81       	ld	r24, Z
 1da:	80 6f       	ori	r24, 0xF0	; 240
 1dc:	80 83       	st	Z, r24
 1de:	08 95       	ret

000001e0 <_Z17stopReflexSensorsv>:
}

void stopReflexSensors() {
	EIMSK &= ~REFLEKS_ENABLE_MASK;
 1e0:	8d b3       	in	r24, 0x1d	; 29
 1e2:	83 7f       	andi	r24, 0xF3	; 243
 1e4:	8d bb       	out	0x1d, r24	; 29
	EICRA &= ~REFLEKS_TRIGGER_MASK;
 1e6:	e9 e6       	ldi	r30, 0x69	; 105
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	80 81       	ld	r24, Z
 1ec:	8f 70       	andi	r24, 0x0F	; 15
 1ee:	80 83       	st	Z, r24
 1f0:	08 95       	ret

000001f2 <_Z6reflexv>:

volatile unsigned int reflexCount = 0;

void reflex() {
	//Interrupt fra refleks
	stopReflexSensors();	
 1f2:	f6 df       	rcall	.-20     	; 0x1e0 <_Z17stopReflexSensorsv>
	
	reflexCount++;
 1f4:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 1f8:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 1fc:	01 96       	adiw	r24, 0x01	; 1
 1fe:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 202:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
	PORTB = reflexCount;
 206:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 20a:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 20e:	85 b9       	out	0x05, r24	; 5
 210:	2f ef       	ldi	r18, 0xFF	; 255
 212:	87 e8       	ldi	r24, 0x87	; 135
 214:	93 e1       	ldi	r25, 0x13	; 19
 216:	21 50       	subi	r18, 0x01	; 1
 218:	80 40       	sbci	r24, 0x00	; 0
 21a:	90 40       	sbci	r25, 0x00	; 0
 21c:	e1 f7       	brne	.-8      	; 0x216 <_Z6reflexv+0x24>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <_Z6reflexv+0x2e>
	_delay_ms(REFLEKS_TIMEOUT);
	
	startReflexSensors();
 220:	00 00       	nop
 222:	d5 cf       	rjmp	.-86     	; 0x1ce <_Z18startReflexSensorsv>
 224:	08 95       	ret

00000226 <__vector_3>:
void stopReflexSensors() {
	EIMSK &= ~REFLEKS_ENABLE_MASK;
	EICRA &= ~REFLEKS_TRIGGER_MASK;
}

ISR(REFLEKS1) { // Com pin 21
 226:	1f 92       	push	r1
 228:	0f 92       	push	r0
 22a:	0f b6       	in	r0, 0x3f	; 63
 22c:	0f 92       	push	r0
 22e:	11 24       	eor	r1, r1
 230:	0b b6       	in	r0, 0x3b	; 59
 232:	0f 92       	push	r0
 234:	2f 93       	push	r18
 236:	3f 93       	push	r19
 238:	4f 93       	push	r20
 23a:	5f 93       	push	r21
 23c:	6f 93       	push	r22
 23e:	7f 93       	push	r23
 240:	8f 93       	push	r24
 242:	9f 93       	push	r25
 244:	af 93       	push	r26
 246:	bf 93       	push	r27
 248:	ef 93       	push	r30
 24a:	ff 93       	push	r31
	// Reflekssensor 1
	reflex();
 24c:	d2 df       	rcall	.-92     	; 0x1f2 <_Z6reflexv>
}
 24e:	ff 91       	pop	r31
 250:	ef 91       	pop	r30
 252:	bf 91       	pop	r27
 254:	af 91       	pop	r26
 256:	9f 91       	pop	r25
 258:	8f 91       	pop	r24
 25a:	7f 91       	pop	r23
 25c:	6f 91       	pop	r22
 25e:	5f 91       	pop	r21
 260:	4f 91       	pop	r20
 262:	3f 91       	pop	r19
 264:	2f 91       	pop	r18
 266:	0f 90       	pop	r0
 268:	0b be       	out	0x3b, r0	; 59
 26a:	0f 90       	pop	r0
 26c:	0f be       	out	0x3f, r0	; 63
 26e:	0f 90       	pop	r0
 270:	1f 90       	pop	r1
 272:	18 95       	reti

00000274 <__vector_4>:

ISR(REFLEKS2) {
 274:	1f 92       	push	r1
 276:	0f 92       	push	r0
 278:	0f b6       	in	r0, 0x3f	; 63
 27a:	0f 92       	push	r0
 27c:	11 24       	eor	r1, r1
 27e:	0b b6       	in	r0, 0x3b	; 59
 280:	0f 92       	push	r0
 282:	2f 93       	push	r18
 284:	3f 93       	push	r19
 286:	4f 93       	push	r20
 288:	5f 93       	push	r21
 28a:	6f 93       	push	r22
 28c:	7f 93       	push	r23
 28e:	8f 93       	push	r24
 290:	9f 93       	push	r25
 292:	af 93       	push	r26
 294:	bf 93       	push	r27
 296:	ef 93       	push	r30
 298:	ff 93       	push	r31
	// Reflekssensor 2
	reflex();
 29a:	ab df       	rcall	.-170    	; 0x1f2 <_Z6reflexv>
}
 29c:	ff 91       	pop	r31
 29e:	ef 91       	pop	r30
 2a0:	bf 91       	pop	r27
 2a2:	af 91       	pop	r26
 2a4:	9f 91       	pop	r25
 2a6:	8f 91       	pop	r24
 2a8:	7f 91       	pop	r23
 2aa:	6f 91       	pop	r22
 2ac:	5f 91       	pop	r21
 2ae:	4f 91       	pop	r20
 2b0:	3f 91       	pop	r19
 2b2:	2f 91       	pop	r18
 2b4:	0f 90       	pop	r0
 2b6:	0b be       	out	0x3b, r0	; 59
 2b8:	0f 90       	pop	r0
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	0f 90       	pop	r0
 2be:	1f 90       	pop	r1
 2c0:	18 95       	reti

000002c2 <main>:

int main(void)
{
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
 2c6:	00 d0       	rcall	.+0      	; 0x2c8 <main+0x6>
 2c8:	1f 92       	push	r1
 2ca:	cd b7       	in	r28, 0x3d	; 61
 2cc:	de b7       	in	r29, 0x3e	; 62
	DDRB = 0xFF;
 2ce:	8f ef       	ldi	r24, 0xFF	; 255
 2d0:	84 b9       	out	0x04, r24	; 4
	PORTB = 0;
 2d2:	15 b8       	out	0x05, r1	; 5
	
	EIMSK = EIMSK | 0b00000100;
 2d4:	8d b3       	in	r24, 0x1d	; 29
 2d6:	84 60       	ori	r24, 0x04	; 4
 2d8:	8d bb       	out	0x1d, r24	; 29
	EICRA |= 0b00110000;
 2da:	e9 e6       	ldi	r30, 0x69	; 105
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	80 81       	ld	r24, Z
 2e0:	80 63       	ori	r24, 0x30	; 48
 2e2:	80 83       	st	Z, r24
	sei();
 2e4:	78 94       	sei
	
	// while ((INIT_BUTTON_PIN & 0b10000000) != 0) {}
	
	

	DriveControl controller;
 2e6:	ce 01       	movw	r24, r28
 2e8:	01 96       	adiw	r24, 0x01	; 1
 2ea:	0f df       	rcall	.-482    	; 0x10a <_ZN12DriveControlC1Ev>
	controller.startDriveControl();
 2ec:	ce 01       	movw	r24, r28
 2ee:	01 96       	adiw	r24, 0x01	; 1
 2f0:	37 df       	rcall	.-402    	; 0x160 <_ZN12DriveControl17startDriveControlEv>
 2f2:	ff cf       	rjmp	.-2      	; 0x2f2 <main+0x30>

000002f4 <_ZN5MotorC1Ev>:


#include "Motor.h"

// default constructor
Motor::Motor()
 2f4:	08 95       	ret

000002f6 <_ZN5SoundC1Ev>:
*/
#include "Sound.h"
#include "UART.h"

// default constructor
Sound::Sound()
 2f6:	0f 93       	push	r16
 2f8:	1f 93       	push	r17
 2fa:	cf 93       	push	r28
 2fc:	df 93       	push	r29
 2fe:	1f 92       	push	r1
 300:	cd b7       	in	r28, 0x3d	; 61
 302:	de b7       	in	r29, 0x3e	; 62
 304:	8c 01       	movw	r16, r24
 306:	99 d0       	rcall	.+306    	; 0x43a <_ZN4UARTC1Ev>
{
	UART uart;
 308:	ce 01       	movw	r24, r28
 30a:	01 96       	adiw	r24, 0x01	; 1
 30c:	96 d0       	rcall	.+300    	; 0x43a <_ZN4UARTC1Ev>
	uart_driver_ = uart;
	//Set SD Card as source
	uart_driver_.SendChar(0x7E);
 30e:	6e e7       	ldi	r22, 0x7E	; 126
 310:	c8 01       	movw	r24, r16
 312:	a1 d0       	rcall	.+322    	; 0x456 <_ZN4UART8SendCharEc>
	uart_driver_.SendChar(0x09);
 314:	69 e0       	ldi	r22, 0x09	; 9
 316:	c8 01       	movw	r24, r16
 318:	9e d0       	rcall	.+316    	; 0x456 <_ZN4UART8SendCharEc>
	uart_driver_.SendChar(0x00);
 31a:	60 e0       	ldi	r22, 0x00	; 0
 31c:	c8 01       	movw	r24, r16
 31e:	9b d0       	rcall	.+310    	; 0x456 <_ZN4UART8SendCharEc>
	uart_driver_.SendChar(0x00);
 320:	60 e0       	ldi	r22, 0x00	; 0
 322:	c8 01       	movw	r24, r16
 324:	98 d0       	rcall	.+304    	; 0x456 <_ZN4UART8SendCharEc>
	uart_driver_.SendChar(0x02);
 326:	62 e0       	ldi	r22, 0x02	; 2
 328:	c8 01       	movw	r24, r16
 32a:	95 d0       	rcall	.+298    	; 0x456 <_ZN4UART8SendCharEc>
	uart_driver_.SendChar(0xFF);
 32c:	6f ef       	ldi	r22, 0xFF	; 255
 32e:	c8 01       	movw	r24, r16
 330:	92 d0       	rcall	.+292    	; 0x456 <_ZN4UART8SendCharEc>
	uart_driver_.SendChar(0xF5);
 332:	65 ef       	ldi	r22, 0xF5	; 245
 334:	c8 01       	movw	r24, r16
 336:	8f d0       	rcall	.+286    	; 0x456 <_ZN4UART8SendCharEc>
	uart_driver_.SendChar(0xEF);
 338:	6f ee       	ldi	r22, 0xEF	; 239
 33a:	c8 01       	movw	r24, r16
 33c:	8c d0       	rcall	.+280    	; 0x456 <_ZN4UART8SendCharEc>
	
	//SET VOLUME 30
	uart_driver_.SendChar(0x7E);
 33e:	6e e7       	ldi	r22, 0x7E	; 126
 340:	c8 01       	movw	r24, r16
 342:	89 d0       	rcall	.+274    	; 0x456 <_ZN4UART8SendCharEc>
	uart_driver_.SendChar(0x06);
 344:	66 e0       	ldi	r22, 0x06	; 6
 346:	c8 01       	movw	r24, r16
 348:	86 d0       	rcall	.+268    	; 0x456 <_ZN4UART8SendCharEc>
	uart_driver_.SendChar(0x00);
 34a:	60 e0       	ldi	r22, 0x00	; 0
 34c:	c8 01       	movw	r24, r16
 34e:	83 d0       	rcall	.+262    	; 0x456 <_ZN4UART8SendCharEc>
	uart_driver_.SendChar(0x00);
 350:	60 e0       	ldi	r22, 0x00	; 0
 352:	c8 01       	movw	r24, r16
 354:	80 d0       	rcall	.+256    	; 0x456 <_ZN4UART8SendCharEc>
	uart_driver_.SendChar(0x1E);
 356:	6e e1       	ldi	r22, 0x1E	; 30
 358:	c8 01       	movw	r24, r16
 35a:	7d d0       	rcall	.+250    	; 0x456 <_ZN4UART8SendCharEc>
	uart_driver_.SendChar(0xFF);
 35c:	6f ef       	ldi	r22, 0xFF	; 255
 35e:	c8 01       	movw	r24, r16
 360:	7a d0       	rcall	.+244    	; 0x456 <_ZN4UART8SendCharEc>
 362:	6c ed       	ldi	r22, 0xDC	; 220
	uart_driver_.SendChar(0xDC);
 364:	c8 01       	movw	r24, r16
 366:	77 d0       	rcall	.+238    	; 0x456 <_ZN4UART8SendCharEc>
 368:	6f ee       	ldi	r22, 0xEF	; 239
 36a:	c8 01       	movw	r24, r16
	uart_driver_.SendChar(0xEF);
 36c:	74 d0       	rcall	.+232    	; 0x456 <_ZN4UART8SendCharEc>
 36e:	ce 01       	movw	r24, r28
 370:	01 96       	adiw	r24, 0x01	; 1
 372:	70 d0       	rcall	.+224    	; 0x454 <_ZN4UARTD1Ev>
#include "UART.h"

// default constructor
Sound::Sound()
{
	UART uart;
 374:	0f 90       	pop	r0
 376:	df 91       	pop	r29
 378:	cf 91       	pop	r28
 37a:	1f 91       	pop	r17
	uart_driver_.SendChar(0x00);
	uart_driver_.SendChar(0x1E);
	uart_driver_.SendChar(0xFF);
	uart_driver_.SendChar(0xDC);
	uart_driver_.SendChar(0xEF);
} //Sound
 37c:	0f 91       	pop	r16
 37e:	08 95       	ret

00000380 <_ZN5SoundD1Ev>:
 380:	69 c0       	rjmp	.+210    	; 0x454 <_ZN4UARTD1Ev>
 382:	08 95       	ret

00000384 <_ZN5Sound9playSoundEi>:
 384:	0f 93       	push	r16
 386:	1f 93       	push	r17
Sound::~Sound()
{
} //~Sound

void Sound::playSound(int sound)
{
 388:	cf 93       	push	r28
 38a:	df 93       	push	r29
 38c:	ec 01       	movw	r28, r24
 38e:	8b 01       	movw	r16, r22
	if (sound == 1) {
 390:	61 30       	cpi	r22, 0x01	; 1
 392:	71 05       	cpc	r23, r1
 394:	b9 f4       	brne	.+46     	; 0x3c4 <_ZN5Sound9playSoundEi+0x40>
		//PLAY START SOUND
		uart_driver_.SendChar(0x7E);
 396:	6e e7       	ldi	r22, 0x7E	; 126
 398:	5e d0       	rcall	.+188    	; 0x456 <_ZN4UART8SendCharEc>
		uart_driver_.SendChar(0x0F);
 39a:	6f e0       	ldi	r22, 0x0F	; 15
 39c:	ce 01       	movw	r24, r28
 39e:	5b d0       	rcall	.+182    	; 0x456 <_ZN4UART8SendCharEc>
		uart_driver_.SendChar(0x00);
 3a0:	60 e0       	ldi	r22, 0x00	; 0
 3a2:	ce 01       	movw	r24, r28
 3a4:	58 d0       	rcall	.+176    	; 0x456 <_ZN4UART8SendCharEc>
		uart_driver_.SendChar(0x01);
 3a6:	61 e0       	ldi	r22, 0x01	; 1
 3a8:	ce 01       	movw	r24, r28
 3aa:	55 d0       	rcall	.+170    	; 0x456 <_ZN4UART8SendCharEc>
		uart_driver_.SendChar(0x01);
 3ac:	61 e0       	ldi	r22, 0x01	; 1
 3ae:	ce 01       	movw	r24, r28
 3b0:	52 d0       	rcall	.+164    	; 0x456 <_ZN4UART8SendCharEc>
		uart_driver_.SendChar(0xFF);
 3b2:	6f ef       	ldi	r22, 0xFF	; 255
 3b4:	ce 01       	movw	r24, r28
 3b6:	4f d0       	rcall	.+158    	; 0x456 <_ZN4UART8SendCharEc>
		uart_driver_.SendChar(0xEF);
 3b8:	6f ee       	ldi	r22, 0xEF	; 239
 3ba:	ce 01       	movw	r24, r28
 3bc:	4c d0       	rcall	.+152    	; 0x456 <_ZN4UART8SendCharEc>
 3be:	6f ee       	ldi	r22, 0xEF	; 239
		uart_driver_.SendChar(0xEF);
 3c0:	ce 01       	movw	r24, r28
 3c2:	49 d0       	rcall	.+146    	; 0x456 <_ZN4UART8SendCharEc>
 3c4:	02 30       	cpi	r16, 0x02	; 2
	}
	if (sound == 2) {
 3c6:	11 05       	cpc	r17, r1
 3c8:	c1 f4       	brne	.+48     	; 0x3fa <_ZN5Sound9playSoundEi+0x76>
		//PLAY REFLEKSBRIK SOUND
		uart_driver_.SendChar(0x7E);
 3ca:	6e e7       	ldi	r22, 0x7E	; 126
 3cc:	ce 01       	movw	r24, r28
 3ce:	43 d0       	rcall	.+134    	; 0x456 <_ZN4UART8SendCharEc>
		uart_driver_.SendChar(0x0F);
 3d0:	6f e0       	ldi	r22, 0x0F	; 15
 3d2:	ce 01       	movw	r24, r28
 3d4:	40 d0       	rcall	.+128    	; 0x456 <_ZN4UART8SendCharEc>
		uart_driver_.SendChar(0x00);
 3d6:	60 e0       	ldi	r22, 0x00	; 0
 3d8:	ce 01       	movw	r24, r28
 3da:	3d d0       	rcall	.+122    	; 0x456 <_ZN4UART8SendCharEc>
		uart_driver_.SendChar(0x01);
 3dc:	61 e0       	ldi	r22, 0x01	; 1
 3de:	ce 01       	movw	r24, r28
 3e0:	3a d0       	rcall	.+116    	; 0x456 <_ZN4UART8SendCharEc>
		uart_driver_.SendChar(0x02);
 3e2:	62 e0       	ldi	r22, 0x02	; 2
 3e4:	ce 01       	movw	r24, r28
 3e6:	37 d0       	rcall	.+110    	; 0x456 <_ZN4UART8SendCharEc>
 3e8:	6f ef       	ldi	r22, 0xFF	; 255
		uart_driver_.SendChar(0xFF);
 3ea:	ce 01       	movw	r24, r28
 3ec:	34 d0       	rcall	.+104    	; 0x456 <_ZN4UART8SendCharEc>
 3ee:	6e ee       	ldi	r22, 0xEE	; 238
		uart_driver_.SendChar(0xEE);
 3f0:	ce 01       	movw	r24, r28
 3f2:	31 d0       	rcall	.+98     	; 0x456 <_ZN4UART8SendCharEc>
 3f4:	6f ee       	ldi	r22, 0xEF	; 239
		uart_driver_.SendChar(0xEF);
 3f6:	ce 01       	movw	r24, r28
 3f8:	2e d0       	rcall	.+92     	; 0x456 <_ZN4UART8SendCharEc>
 3fa:	03 30       	cpi	r16, 0x03	; 3
	}
	if (sound == 3) {
 3fc:	11 05       	cpc	r17, r1
 3fe:	c1 f4       	brne	.+48     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		//PLAY STOP SOUND
		uart_driver_.SendChar(0x7E);
 400:	6e e7       	ldi	r22, 0x7E	; 126
 402:	ce 01       	movw	r24, r28
 404:	28 d0       	rcall	.+80     	; 0x456 <_ZN4UART8SendCharEc>
		uart_driver_.SendChar(0x0F);
 406:	6f e0       	ldi	r22, 0x0F	; 15
 408:	ce 01       	movw	r24, r28
 40a:	25 d0       	rcall	.+74     	; 0x456 <_ZN4UART8SendCharEc>
		uart_driver_.SendChar(0x00);
 40c:	60 e0       	ldi	r22, 0x00	; 0
 40e:	ce 01       	movw	r24, r28
 410:	22 d0       	rcall	.+68     	; 0x456 <_ZN4UART8SendCharEc>
 412:	61 e0       	ldi	r22, 0x01	; 1
		uart_driver_.SendChar(0x01);
 414:	ce 01       	movw	r24, r28
 416:	1f d0       	rcall	.+62     	; 0x456 <_ZN4UART8SendCharEc>
 418:	63 e0       	ldi	r22, 0x03	; 3
 41a:	ce 01       	movw	r24, r28
		uart_driver_.SendChar(0x03);
 41c:	1c d0       	rcall	.+56     	; 0x456 <_ZN4UART8SendCharEc>
 41e:	6f ef       	ldi	r22, 0xFF	; 255
 420:	ce 01       	movw	r24, r28
 422:	19 d0       	rcall	.+50     	; 0x456 <_ZN4UART8SendCharEc>
		uart_driver_.SendChar(0xFF);
 424:	6d ee       	ldi	r22, 0xED	; 237
 426:	ce 01       	movw	r24, r28
 428:	16 d0       	rcall	.+44     	; 0x456 <_ZN4UART8SendCharEc>
 42a:	6f ee       	ldi	r22, 0xEF	; 239
		uart_driver_.SendChar(0xED);
 42c:	ce 01       	movw	r24, r28
 42e:	13 d0       	rcall	.+38     	; 0x456 <_ZN4UART8SendCharEc>
 430:	df 91       	pop	r29
 432:	cf 91       	pop	r28
		uart_driver_.SendChar(0xEF);
 434:	1f 91       	pop	r17
 436:	0f 91       	pop	r16
 438:	08 95       	ret

0000043a <_ZN4UARTC1Ev>:
 43a:	88 e6       	ldi	r24, 0x68	; 104
	}
}
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	90 93 d5 00 	sts	0x00D5, r25	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7c00d5>
 442:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7c00d4>
{
	while (!CharReady()) {}
	char Text = UDR2;
	return Text;

}
 446:	88 e1       	ldi	r24, 0x18	; 24
 448:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7c00d1>
 44c:	86 e0       	ldi	r24, 0x06	; 6
 44e:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7c00d2>
 452:	08 95       	ret

00000454 <_ZN4UARTD1Ev>:
 454:	08 95       	ret

00000456 <_ZN4UART8SendCharEc>:
Parameter :
Tegn : Character for sending.
*************************************************************************/
void UART::SendChar(char Tegn)
{
	while ((UCSR2A & 0b00100000) == 0) {}
 456:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7c00d0>
 45a:	85 ff       	sbrs	r24, 5
 45c:	fc cf       	rjmp	.-8      	; 0x456 <_ZN4UART8SendCharEc>
	UDR2 = Tegn;
 45e:	60 93 d6 00 	sts	0x00D6, r22	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
 462:	08 95       	ret

00000464 <_exit>:
 464:	f8 94       	cli

00000466 <__stop_program>:
 466:	ff cf       	rjmp	.-2      	; 0x466 <__stop_program>
