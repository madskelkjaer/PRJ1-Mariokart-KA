
MarioKart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000048c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000418  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800200  00800200  0000048c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002638  00000000  00000000  00000654  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000142e  00000000  00000000  00002c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009ee  00000000  00000000  000040ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000330  00000000  00000000  00004aa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a71  00000000  00000000  00004dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007af  00000000  00000000  00005849  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00005ff8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	e1 c0       	rjmp	.+450    	; 0x1c8 <__vector_1>
   6:	00 00       	nop
   8:	06 c1       	rjmp	.+524    	; 0x216 <__vector_2>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a3 30       	cpi	r26, 0x03	; 3
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	af d0       	rcall	.+350    	; 0x264 <main>
 106:	86 c1       	rjmp	.+780    	; 0x414 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <_ZN12DriveControlC1Ev>:

// ## SoundDriver ##
#include "..\SoundDriver/Sound.h"

// default constructor
DriveControl::DriveControl()
 10a:	0f 93       	push	r16
 10c:	1f 93       	push	r17
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	00 d0       	rcall	.+0      	; 0x114 <_ZN12DriveControlC1Ev+0xa>
 114:	cd b7       	in	r28, 0x3d	; 61
 116:	de b7       	in	r29, 0x3e	; 62
 118:	8c 01       	movw	r16, r24
 11a:	c5 d0       	rcall	.+394    	; 0x2a6 <_ZN5SoundC1Ev>
 11c:	c8 01       	movw	r24, r16
 11e:	01 96       	adiw	r24, 0x01	; 1
 120:	2c d0       	rcall	.+88     	; 0x17a <_ZN10FrontLightC1Ev>
 122:	c8 01       	movw	r24, r16
 124:	02 96       	adiw	r24, 0x02	; 2
 126:	1e d0       	rcall	.+60     	; 0x164 <_ZN9BackLightC1Ev>
{
	Sound sound;
 128:	ce 01       	movw	r24, r28
 12a:	03 96       	adiw	r24, 0x03	; 3
 12c:	bc d0       	rcall	.+376    	; 0x2a6 <_ZN5SoundC1Ev>
	sound_ = sound;
	
	FrontLight frontLight;
 12e:	ce 01       	movw	r24, r28
 130:	02 96       	adiw	r24, 0x02	; 2
 132:	23 d0       	rcall	.+70     	; 0x17a <_ZN10FrontLightC1Ev>
	frontLight_ = frontLight;
	
	BackLight backLight;
 134:	ce 01       	movw	r24, r28
 136:	01 96       	adiw	r24, 0x01	; 1
 138:	15 d0       	rcall	.+42     	; 0x164 <_ZN9BackLightC1Ev>
 13a:	ce 01       	movw	r24, r28
 13c:	01 96       	adiw	r24, 0x01	; 1
 13e:	1c d0       	rcall	.+56     	; 0x178 <_ZN9BackLightD1Ev>
DriveControl::DriveControl()
{
	Sound sound;
	sound_ = sound;
	
	FrontLight frontLight;
 140:	ce 01       	movw	r24, r28
 142:	02 96       	adiw	r24, 0x02	; 2
 144:	24 d0       	rcall	.+72     	; 0x18e <_ZN10FrontLightD1Ev>
 146:	ce 01       	movw	r24, r28
#include "..\SoundDriver/Sound.h"

// default constructor
DriveControl::DriveControl()
{
	Sound sound;
 148:	03 96       	adiw	r24, 0x03	; 3
 14a:	f2 d0       	rcall	.+484    	; 0x330 <_ZN5SoundD1Ev>
 14c:	0f 90       	pop	r0
 14e:	0f 90       	pop	r0
	FrontLight frontLight;
	frontLight_ = frontLight;
	
	BackLight backLight;
	backLight_ = backLight;
} //DriveControl
 150:	0f 90       	pop	r0
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	1f 91       	pop	r17
 158:	0f 91       	pop	r16
 15a:	08 95       	ret

0000015c <_ZN12DriveControl17startDriveControlEv>:
 15c:	61 e0       	ldi	r22, 0x01	; 1
 15e:	70 e0       	ldi	r23, 0x00	; 0

void DriveControl::startDriveControl()
{
	sound_.playSound(1);
 160:	e9 c0       	rjmp	.+466    	; 0x334 <_ZN5Sound9playSoundEi>
 162:	08 95       	ret

00000164 <_ZN9BackLightC1Ev>:
{
	// Mode = 3 (PWM, Phase Correct, 10 bit)
	// Set OC1A on match down counting / Clear OC1A on match up counting
	// Set OC1B on match down counting / Clear OCBA on match up counting
	// Clock prescaler = 1
	TCCR1A = 0b10100011;
 164:	83 ea       	ldi	r24, 0xA3	; 163
 166:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
	TCCR1B = 0b00000001;
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
		
	//Configure PORTB as output
	//Clear PORTB
	DDRB=0xFF;
 170:	8f ef       	ldi	r24, 0xFF	; 255
 172:	84 b9       	out	0x04, r24	; 4
	PORTB=0x00;
 174:	15 b8       	out	0x05, r1	; 5
 176:	08 95       	ret

00000178 <_ZN9BackLightD1Ev>:
} //BackLight

// default destructor
BackLight::~BackLight()
 178:	08 95       	ret

0000017a <_ZN10FrontLightC1Ev>:
{
	// Mode = 3 (PWM, Phase Correct, 10 bit)
	// Set OC1A on match down counting / Clear OC1A on match up counting
	// Set OC1B on match down counting / Clear OCBA on match up counting
	// Clock prescaler = 1
	TCCR1A = 0b10100011;
 17a:	83 ea       	ldi	r24, 0xA3	; 163
 17c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
	TCCR1B = 0b00000001;
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
	
	//Configure PORTB as output
	//Clear PORTB
	DDRB=0xFF;
 186:	8f ef       	ldi	r24, 0xFF	; 255
 188:	84 b9       	out	0x04, r24	; 4
	PORTB=0x00;
 18a:	15 b8       	out	0x05, r1	; 5
 18c:	08 95       	ret

0000018e <_ZN10FrontLightD1Ev>:
} //FrontLight

// default destructor
FrontLight::~FrontLight()
 18e:	08 95       	ret

00000190 <_Z6reflexv>:
volatile unsigned int reflexCount = 0;
volatile bool reflexTimeout = false;

void reflex() {
	//Interrupt fra refleks
	if (reflexTimeout) {
 190:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 194:	81 11       	cpse	r24, r1
 196:	17 c0       	rjmp	.+46     	; 0x1c6 <_Z6reflexv+0x36>
		return;
	}
	
	reflexTimeout = true;
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
	reflexCount++;
 19e:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <reflexCount>
 1a2:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <reflexCount+0x1>
 1a6:	01 96       	adiw	r24, 0x01	; 1
 1a8:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <reflexCount+0x1>
 1ac:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <reflexCount>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b0:	2f ef       	ldi	r18, 0xFF	; 255
 1b2:	81 ee       	ldi	r24, 0xE1	; 225
 1b4:	94 e0       	ldi	r25, 0x04	; 4
 1b6:	21 50       	subi	r18, 0x01	; 1
 1b8:	80 40       	sbci	r24, 0x00	; 0
 1ba:	90 40       	sbci	r25, 0x00	; 0
 1bc:	e1 f7       	brne	.-8      	; 0x1b6 <_Z6reflexv+0x26>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <_Z6reflexv+0x30>
 1c0:	00 00       	nop
	_delay_ms(100);
	reflexTimeout = false;
 1c2:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
 1c6:	08 95       	ret

000001c8 <__vector_1>:
}

ISR(INT0_vect) { // Com pin 21
 1c8:	1f 92       	push	r1
 1ca:	0f 92       	push	r0
 1cc:	0f b6       	in	r0, 0x3f	; 63
 1ce:	0f 92       	push	r0
 1d0:	11 24       	eor	r1, r1
 1d2:	0b b6       	in	r0, 0x3b	; 59
 1d4:	0f 92       	push	r0
 1d6:	2f 93       	push	r18
 1d8:	3f 93       	push	r19
 1da:	4f 93       	push	r20
 1dc:	5f 93       	push	r21
 1de:	6f 93       	push	r22
 1e0:	7f 93       	push	r23
 1e2:	8f 93       	push	r24
 1e4:	9f 93       	push	r25
 1e6:	af 93       	push	r26
 1e8:	bf 93       	push	r27
 1ea:	ef 93       	push	r30
 1ec:	ff 93       	push	r31
	// Reflekssensor 1
	reflex();
 1ee:	d0 df       	rcall	.-96     	; 0x190 <_Z6reflexv>
}
 1f0:	ff 91       	pop	r31
 1f2:	ef 91       	pop	r30
 1f4:	bf 91       	pop	r27
 1f6:	af 91       	pop	r26
 1f8:	9f 91       	pop	r25
 1fa:	8f 91       	pop	r24
 1fc:	7f 91       	pop	r23
 1fe:	6f 91       	pop	r22
 200:	5f 91       	pop	r21
 202:	4f 91       	pop	r20
 204:	3f 91       	pop	r19
 206:	2f 91       	pop	r18
 208:	0f 90       	pop	r0
 20a:	0b be       	out	0x3b, r0	; 59
 20c:	0f 90       	pop	r0
 20e:	0f be       	out	0x3f, r0	; 63
 210:	0f 90       	pop	r0
 212:	1f 90       	pop	r1
 214:	18 95       	reti

00000216 <__vector_2>:

ISR(INT1_vect) { // com pin 20
 216:	1f 92       	push	r1
 218:	0f 92       	push	r0
 21a:	0f b6       	in	r0, 0x3f	; 63
 21c:	0f 92       	push	r0
 21e:	11 24       	eor	r1, r1
 220:	0b b6       	in	r0, 0x3b	; 59
 222:	0f 92       	push	r0
 224:	2f 93       	push	r18
 226:	3f 93       	push	r19
 228:	4f 93       	push	r20
 22a:	5f 93       	push	r21
 22c:	6f 93       	push	r22
 22e:	7f 93       	push	r23
 230:	8f 93       	push	r24
 232:	9f 93       	push	r25
 234:	af 93       	push	r26
 236:	bf 93       	push	r27
 238:	ef 93       	push	r30
 23a:	ff 93       	push	r31
	// Reflekssensor 2
	reflex();
 23c:	a9 df       	rcall	.-174    	; 0x190 <_Z6reflexv>
}
 23e:	ff 91       	pop	r31
 240:	ef 91       	pop	r30
 242:	bf 91       	pop	r27
 244:	af 91       	pop	r26
 246:	9f 91       	pop	r25
 248:	8f 91       	pop	r24
 24a:	7f 91       	pop	r23
 24c:	6f 91       	pop	r22
 24e:	5f 91       	pop	r21
 250:	4f 91       	pop	r20
 252:	3f 91       	pop	r19
 254:	2f 91       	pop	r18
 256:	0f 90       	pop	r0
 258:	0b be       	out	0x3b, r0	; 59
 25a:	0f 90       	pop	r0
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	0f 90       	pop	r0
 260:	1f 90       	pop	r1
 262:	18 95       	reti

00000264 <main>:

int main(void)
{
 264:	cf 93       	push	r28
 266:	df 93       	push	r29
 268:	00 d0       	rcall	.+0      	; 0x26a <main+0x6>
 26a:	cd b7       	in	r28, 0x3d	; 61
 26c:	de b7       	in	r29, 0x3e	; 62
	INIT_BUTTON_DDR = 0xFF;
 26e:	8f ef       	ldi	r24, 0xFF	; 255
 270:	81 b9       	out	0x01, r24	; 1
	
	while ((INIT_BUTTON_PIN & 0b10000000) != 0) {}
 272:	07 99       	sbic	0x00, 7	; 0
 274:	fe cf       	rjmp	.-4      	; 0x272 <main+0xe>
	
	sei();
 276:	78 94       	sei

	DriveControl controller;
 278:	ce 01       	movw	r24, r28
 27a:	01 96       	adiw	r24, 0x01	; 1
 27c:	46 df       	rcall	.-372    	; 0x10a <_ZN12DriveControlC1Ev>
	controller.startDriveControl();
 27e:	ce 01       	movw	r24, r28
 280:	01 96       	adiw	r24, 0x01	; 1
 282:	6c df       	rcall	.-296    	; 0x15c <_ZN12DriveControl17startDriveControlEv>
#include "..\LightDriver\BackLight.h"

// ## SoundDriver ##
#include "..\SoundDriver/Sound.h"

class DriveControl
 284:	ce 01       	movw	r24, r28
 286:	03 96       	adiw	r24, 0x03	; 3
 288:	77 df       	rcall	.-274    	; 0x178 <_ZN9BackLightD1Ev>
 28a:	ce 01       	movw	r24, r28
 28c:	02 96       	adiw	r24, 0x02	; 2
 28e:	7f df       	rcall	.-258    	; 0x18e <_ZN10FrontLightD1Ev>
 290:	ce 01       	movw	r24, r28
 292:	01 96       	adiw	r24, 0x01	; 1
 294:	4d d0       	rcall	.+154    	; 0x330 <_ZN5SoundD1Ev>
}
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0f 90       	pop	r0
 29c:	0f 90       	pop	r0
 29e:	0f 90       	pop	r0
 2a0:	df 91       	pop	r29
 2a2:	cf 91       	pop	r28
 2a4:	08 95       	ret

000002a6 <_ZN5SoundC1Ev>:
*/
#include "Sound.h"
#include "UART.h"

// default constructor
Sound::Sound()
 2a6:	0f 93       	push	r16
 2a8:	1f 93       	push	r17
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	1f 92       	push	r1
 2b0:	cd b7       	in	r28, 0x3d	; 61
 2b2:	de b7       	in	r29, 0x3e	; 62
 2b4:	8c 01       	movw	r16, r24
 2b6:	99 d0       	rcall	.+306    	; 0x3ea <_ZN4UARTC1Ev>
{
	UART uart;
 2b8:	ce 01       	movw	r24, r28
 2ba:	01 96       	adiw	r24, 0x01	; 1
 2bc:	96 d0       	rcall	.+300    	; 0x3ea <_ZN4UARTC1Ev>
	uart_driver_ = uart;
	//Set SD Card as source
	uart_driver_.SendChar(0x7E);
 2be:	6e e7       	ldi	r22, 0x7E	; 126
 2c0:	c8 01       	movw	r24, r16
 2c2:	a1 d0       	rcall	.+322    	; 0x406 <_ZN4UART8SendCharEc>
	uart_driver_.SendChar(0x09);
 2c4:	69 e0       	ldi	r22, 0x09	; 9
 2c6:	c8 01       	movw	r24, r16
 2c8:	9e d0       	rcall	.+316    	; 0x406 <_ZN4UART8SendCharEc>
	uart_driver_.SendChar(0x00);
 2ca:	60 e0       	ldi	r22, 0x00	; 0
 2cc:	c8 01       	movw	r24, r16
 2ce:	9b d0       	rcall	.+310    	; 0x406 <_ZN4UART8SendCharEc>
	uart_driver_.SendChar(0x00);
 2d0:	60 e0       	ldi	r22, 0x00	; 0
 2d2:	c8 01       	movw	r24, r16
 2d4:	98 d0       	rcall	.+304    	; 0x406 <_ZN4UART8SendCharEc>
	uart_driver_.SendChar(0x02);
 2d6:	62 e0       	ldi	r22, 0x02	; 2
 2d8:	c8 01       	movw	r24, r16
 2da:	95 d0       	rcall	.+298    	; 0x406 <_ZN4UART8SendCharEc>
	uart_driver_.SendChar(0xFF);
 2dc:	6f ef       	ldi	r22, 0xFF	; 255
 2de:	c8 01       	movw	r24, r16
 2e0:	92 d0       	rcall	.+292    	; 0x406 <_ZN4UART8SendCharEc>
	uart_driver_.SendChar(0xF5);
 2e2:	65 ef       	ldi	r22, 0xF5	; 245
 2e4:	c8 01       	movw	r24, r16
 2e6:	8f d0       	rcall	.+286    	; 0x406 <_ZN4UART8SendCharEc>
	uart_driver_.SendChar(0xEF);
 2e8:	6f ee       	ldi	r22, 0xEF	; 239
 2ea:	c8 01       	movw	r24, r16
 2ec:	8c d0       	rcall	.+280    	; 0x406 <_ZN4UART8SendCharEc>
	
	//SET VOLUME 30
	uart_driver_.SendChar(0x7E);
 2ee:	6e e7       	ldi	r22, 0x7E	; 126
 2f0:	c8 01       	movw	r24, r16
 2f2:	89 d0       	rcall	.+274    	; 0x406 <_ZN4UART8SendCharEc>
	uart_driver_.SendChar(0x06);
 2f4:	66 e0       	ldi	r22, 0x06	; 6
 2f6:	c8 01       	movw	r24, r16
 2f8:	86 d0       	rcall	.+268    	; 0x406 <_ZN4UART8SendCharEc>
	uart_driver_.SendChar(0x00);
 2fa:	60 e0       	ldi	r22, 0x00	; 0
 2fc:	c8 01       	movw	r24, r16
 2fe:	83 d0       	rcall	.+262    	; 0x406 <_ZN4UART8SendCharEc>
	uart_driver_.SendChar(0x00);
 300:	60 e0       	ldi	r22, 0x00	; 0
 302:	c8 01       	movw	r24, r16
 304:	80 d0       	rcall	.+256    	; 0x406 <_ZN4UART8SendCharEc>
	uart_driver_.SendChar(0x1E);
 306:	6e e1       	ldi	r22, 0x1E	; 30
 308:	c8 01       	movw	r24, r16
 30a:	7d d0       	rcall	.+250    	; 0x406 <_ZN4UART8SendCharEc>
	uart_driver_.SendChar(0xFF);
 30c:	6f ef       	ldi	r22, 0xFF	; 255
 30e:	c8 01       	movw	r24, r16
 310:	7a d0       	rcall	.+244    	; 0x406 <_ZN4UART8SendCharEc>
 312:	6c ed       	ldi	r22, 0xDC	; 220
	uart_driver_.SendChar(0xDC);
 314:	c8 01       	movw	r24, r16
 316:	77 d0       	rcall	.+238    	; 0x406 <_ZN4UART8SendCharEc>
 318:	6f ee       	ldi	r22, 0xEF	; 239
 31a:	c8 01       	movw	r24, r16
	uart_driver_.SendChar(0xEF);
 31c:	74 d0       	rcall	.+232    	; 0x406 <_ZN4UART8SendCharEc>
 31e:	ce 01       	movw	r24, r28
 320:	01 96       	adiw	r24, 0x01	; 1
 322:	70 d0       	rcall	.+224    	; 0x404 <_ZN4UARTD1Ev>
#include "UART.h"

// default constructor
Sound::Sound()
{
	UART uart;
 324:	0f 90       	pop	r0
 326:	df 91       	pop	r29
 328:	cf 91       	pop	r28
 32a:	1f 91       	pop	r17
	uart_driver_.SendChar(0x00);
	uart_driver_.SendChar(0x1E);
	uart_driver_.SendChar(0xFF);
	uart_driver_.SendChar(0xDC);
	uart_driver_.SendChar(0xEF);
} //Sound
 32c:	0f 91       	pop	r16
 32e:	08 95       	ret

00000330 <_ZN5SoundD1Ev>:
 330:	69 c0       	rjmp	.+210    	; 0x404 <_ZN4UARTD1Ev>
 332:	08 95       	ret

00000334 <_ZN5Sound9playSoundEi>:
 334:	0f 93       	push	r16
 336:	1f 93       	push	r17
Sound::~Sound()
{
} //~Sound

void Sound::playSound(int sound)
{
 338:	cf 93       	push	r28
 33a:	df 93       	push	r29
 33c:	ec 01       	movw	r28, r24
 33e:	8b 01       	movw	r16, r22
	if (sound == 1) {
 340:	61 30       	cpi	r22, 0x01	; 1
 342:	71 05       	cpc	r23, r1
 344:	b9 f4       	brne	.+46     	; 0x374 <_ZN5Sound9playSoundEi+0x40>
		//PLAY START SOUND
		uart_driver_.SendChar(0x7E);
 346:	6e e7       	ldi	r22, 0x7E	; 126
 348:	5e d0       	rcall	.+188    	; 0x406 <_ZN4UART8SendCharEc>
		uart_driver_.SendChar(0x0F);
 34a:	6f e0       	ldi	r22, 0x0F	; 15
 34c:	ce 01       	movw	r24, r28
 34e:	5b d0       	rcall	.+182    	; 0x406 <_ZN4UART8SendCharEc>
		uart_driver_.SendChar(0x00);
 350:	60 e0       	ldi	r22, 0x00	; 0
 352:	ce 01       	movw	r24, r28
 354:	58 d0       	rcall	.+176    	; 0x406 <_ZN4UART8SendCharEc>
		uart_driver_.SendChar(0x01);
 356:	61 e0       	ldi	r22, 0x01	; 1
 358:	ce 01       	movw	r24, r28
 35a:	55 d0       	rcall	.+170    	; 0x406 <_ZN4UART8SendCharEc>
		uart_driver_.SendChar(0x01);
 35c:	61 e0       	ldi	r22, 0x01	; 1
 35e:	ce 01       	movw	r24, r28
 360:	52 d0       	rcall	.+164    	; 0x406 <_ZN4UART8SendCharEc>
		uart_driver_.SendChar(0xFF);
 362:	6f ef       	ldi	r22, 0xFF	; 255
 364:	ce 01       	movw	r24, r28
 366:	4f d0       	rcall	.+158    	; 0x406 <_ZN4UART8SendCharEc>
		uart_driver_.SendChar(0xEF);
 368:	6f ee       	ldi	r22, 0xEF	; 239
 36a:	ce 01       	movw	r24, r28
 36c:	4c d0       	rcall	.+152    	; 0x406 <_ZN4UART8SendCharEc>
 36e:	6f ee       	ldi	r22, 0xEF	; 239
		uart_driver_.SendChar(0xEF);
 370:	ce 01       	movw	r24, r28
 372:	49 d0       	rcall	.+146    	; 0x406 <_ZN4UART8SendCharEc>
 374:	02 30       	cpi	r16, 0x02	; 2
	}
	if (sound == 2) {
 376:	11 05       	cpc	r17, r1
 378:	c1 f4       	brne	.+48     	; 0x3aa <_ZN5Sound9playSoundEi+0x76>
		//PLAY REFLEKSBRIK SOUND
		uart_driver_.SendChar(0x7E);
 37a:	6e e7       	ldi	r22, 0x7E	; 126
 37c:	ce 01       	movw	r24, r28
 37e:	43 d0       	rcall	.+134    	; 0x406 <_ZN4UART8SendCharEc>
		uart_driver_.SendChar(0x0F);
 380:	6f e0       	ldi	r22, 0x0F	; 15
 382:	ce 01       	movw	r24, r28
 384:	40 d0       	rcall	.+128    	; 0x406 <_ZN4UART8SendCharEc>
		uart_driver_.SendChar(0x00);
 386:	60 e0       	ldi	r22, 0x00	; 0
 388:	ce 01       	movw	r24, r28
 38a:	3d d0       	rcall	.+122    	; 0x406 <_ZN4UART8SendCharEc>
		uart_driver_.SendChar(0x01);
 38c:	61 e0       	ldi	r22, 0x01	; 1
 38e:	ce 01       	movw	r24, r28
 390:	3a d0       	rcall	.+116    	; 0x406 <_ZN4UART8SendCharEc>
		uart_driver_.SendChar(0x02);
 392:	62 e0       	ldi	r22, 0x02	; 2
 394:	ce 01       	movw	r24, r28
 396:	37 d0       	rcall	.+110    	; 0x406 <_ZN4UART8SendCharEc>
 398:	6f ef       	ldi	r22, 0xFF	; 255
		uart_driver_.SendChar(0xFF);
 39a:	ce 01       	movw	r24, r28
 39c:	34 d0       	rcall	.+104    	; 0x406 <_ZN4UART8SendCharEc>
 39e:	6e ee       	ldi	r22, 0xEE	; 238
		uart_driver_.SendChar(0xEE);
 3a0:	ce 01       	movw	r24, r28
 3a2:	31 d0       	rcall	.+98     	; 0x406 <_ZN4UART8SendCharEc>
 3a4:	6f ee       	ldi	r22, 0xEF	; 239
		uart_driver_.SendChar(0xEF);
 3a6:	ce 01       	movw	r24, r28
 3a8:	2e d0       	rcall	.+92     	; 0x406 <_ZN4UART8SendCharEc>
 3aa:	03 30       	cpi	r16, 0x03	; 3
	}
	if (sound == 3) {
 3ac:	11 05       	cpc	r17, r1
 3ae:	c1 f4       	brne	.+48     	; 0x3e0 <_ZN5Sound9playSoundEi+0xac>
		//PLAY STOP SOUND
		uart_driver_.SendChar(0x7E);
 3b0:	6e e7       	ldi	r22, 0x7E	; 126
 3b2:	ce 01       	movw	r24, r28
 3b4:	28 d0       	rcall	.+80     	; 0x406 <_ZN4UART8SendCharEc>
		uart_driver_.SendChar(0x0F);
 3b6:	6f e0       	ldi	r22, 0x0F	; 15
 3b8:	ce 01       	movw	r24, r28
 3ba:	25 d0       	rcall	.+74     	; 0x406 <_ZN4UART8SendCharEc>
		uart_driver_.SendChar(0x00);
 3bc:	60 e0       	ldi	r22, 0x00	; 0
 3be:	ce 01       	movw	r24, r28
 3c0:	22 d0       	rcall	.+68     	; 0x406 <_ZN4UART8SendCharEc>
 3c2:	61 e0       	ldi	r22, 0x01	; 1
		uart_driver_.SendChar(0x01);
 3c4:	ce 01       	movw	r24, r28
 3c6:	1f d0       	rcall	.+62     	; 0x406 <_ZN4UART8SendCharEc>
 3c8:	63 e0       	ldi	r22, 0x03	; 3
 3ca:	ce 01       	movw	r24, r28
		uart_driver_.SendChar(0x03);
 3cc:	1c d0       	rcall	.+56     	; 0x406 <_ZN4UART8SendCharEc>
 3ce:	6f ef       	ldi	r22, 0xFF	; 255
 3d0:	ce 01       	movw	r24, r28
 3d2:	19 d0       	rcall	.+50     	; 0x406 <_ZN4UART8SendCharEc>
		uart_driver_.SendChar(0xFF);
 3d4:	6d ee       	ldi	r22, 0xED	; 237
 3d6:	ce 01       	movw	r24, r28
 3d8:	16 d0       	rcall	.+44     	; 0x406 <_ZN4UART8SendCharEc>
 3da:	6f ee       	ldi	r22, 0xEF	; 239
		uart_driver_.SendChar(0xED);
 3dc:	ce 01       	movw	r24, r28
 3de:	13 d0       	rcall	.+38     	; 0x406 <_ZN4UART8SendCharEc>
 3e0:	df 91       	pop	r29
 3e2:	cf 91       	pop	r28
		uart_driver_.SendChar(0xEF);
 3e4:	1f 91       	pop	r17
 3e6:	0f 91       	pop	r16
 3e8:	08 95       	ret

000003ea <_ZN4UARTC1Ev>:
 3ea:	88 e6       	ldi	r24, 0x68	; 104
	}
}
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
 3f2:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
{
	while (!CharReady()) {}
	char Text = UDR1;
	return Text;

}
 3f6:	88 e1       	ldi	r24, 0x18	; 24
 3f8:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
 3fc:	86 e0       	ldi	r24, 0x06	; 6
 3fe:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7c00ca>
 402:	08 95       	ret

00000404 <_ZN4UARTD1Ev>:
 404:	08 95       	ret

00000406 <_ZN4UART8SendCharEc>:
Parameter :
Tegn : Character for sending.
*************************************************************************/
void UART::SendChar(char Tegn)
{
	while ((UCSR1A & 0b00100000) == 0) {}
 406:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
 40a:	85 ff       	sbrs	r24, 5
 40c:	fc cf       	rjmp	.-8      	; 0x406 <_ZN4UART8SendCharEc>
	UDR1 = Tegn;
 40e:	60 93 ce 00 	sts	0x00CE, r22	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
 412:	08 95       	ret

00000414 <_exit>:
 414:	f8 94       	cli

00000416 <__stop_program>:
 416:	ff cf       	rjmp	.-2      	; 0x416 <__stop_program>
